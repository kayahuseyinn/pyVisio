Metadata-Version: 2.1
Name: pyVisio
Version: 1.5
Summary: Interactive and dynamic data visualization library
Home-page: https://github.com/kayahuseyinn/pyVisio
Author: HÃ¼seyin Kaya
Author-email: kaya87826@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: matplotlib
Requires-Dist: plotly
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: statsmodels
Requires-Dist: jinja2
Requires-Dist: reportlab


# pyVisio API Reference

## line_chart

Creates a line chart.

**Parameters**:
- `data`: List of values for the line chart.
- `title`: Title of the chart.
- `xlabel`: Label for the x-axis.
- `ylabel`: Label for the y-axis.
- `color`: Color of the line.
- `interactive`: If True, creates an interactive chart.

**Usage**:
```python
import pyVisio as pv
data = [1, 2, 3, 4, 5]
pv.line_chart(data, title="Line Chart", xlabel="X Axis", ylabel="Y Axis", color='red')
```

## bar_chart

Creates a bar chart.

**Parameters**:
- `data`: Dictionary with keys as categories and values as numbers.
- `title`: Title of the chart.
- `xlabel`: Label for the x-axis.
- `ylabel`: Label for the y-axis.
- `color`: Color of the bars.
- `interactive`: If True, creates an interactive chart.

**Usage**:
```python
data_bar = {'A': 10, 'B': 20, 'C': 30}
pv.bar_chart(data_bar, title="Bar Chart", xlabel="Category", ylabel="Value", color='blue')
```

## scatter_plot

Creates a scatter plot.

**Parameters**:
- `x_data`: List of values for the x-axis.
- `y_data`: List of values for the y-axis.
- `title`: Title of the chart.
- `xlabel`: Label for the x-axis.
- `ylabel`: Label for the y-axis.
- `color`: Color of the points.
- `interactive`: If True, creates an interactive chart.

**Usage**:
```python
x_data = [1, 2, 3, 4, 5]
y_data = [10, 14, 12, 15, 10]
pv.scatter_plot(x_data, y_data, title="Scatter Plot", xlabel="X Axis", ylabel="Y Axis", color='blue')
```

## pie_chart

Creates a pie chart.

**Parameters**:
- `data`: Dictionary with keys as categories and values as numbers.
- `title`: Title of the chart.
- `interactive`: If True, creates an interactive chart.

**Usage**:
```python
data_pie = {'Apple': 50, 'Pear': 30, 'Cherry': 20}
pv.pie_chart(data_pie, title="Pie Chart")
```

## time_series_analysis

Performs time series analysis.

**Parameters**:
- `data`: List or array-like object with the time series data.
- `lags`: Number of lags to use in the ARIMA model.

**Usage**:
```python
import numpy as np
data_ts = np.random.randn(100)
summary, forecast, anomalies = pv.time_series_analysis(data_ts, lags=1)
print("Summary:", summary)
print("Forecast:", forecast)
print("Anomalies:", anomalies)
```

## detect_anomalies_in_series

Detects anomalies in a time series.

**Parameters**:
- `data`: List or array-like object with the time series data.

**Usage**:
```python
anomalies = pv.detect_anomalies_in_series(data_ts)
print("Anomalies:", anomalies)
```

## clean_data

Cleans the data using the specified method.

**Parameters**:
- `data`: Dictionary with column names as keys and lists of values as values.
- `method`: Method to use for cleaning the data. Options are "fillna" or "dropna".
- `fill_value`: Value to use for filling missing values if method is "fillna".

**Usage**:
```python
raw_data = {'column1': [1, 2, None, 4, 5], 'column2': [5, None, 3, 2, 1]}
cleaned_data = pv.clean_data(raw_data, method='fillna', fill_value=0)
pv.line_chart(cleaned_data['column1'], title="Line Chart with Cleaned Data")
```

## set_theme

Sets the theme for the charts.

**Parameters**:
- `theme`: Dictionary with keys 'background_color', 'grid_color', 'line_color', 'font_family'.

**Usage**:
```python
custom_theme = {
    'background_color': 'black',
    'grid_color': 'gray',
    'line_color': 'cyan',
    'font_family': 'Arial'
}
pv.set_theme(custom_theme)
pv.line_chart([1, 2, 3, 4, 5], title="Line Chart with Custom Theme")
```

## live_line_chart

Creates a live updating line chart.

**Parameters**:
- `data`: List of initial values for the line chart.
- `title`: Title of the chart.
- `xlabel`: Label for the x-axis.
- `ylabel`: Label for the y-axis.
- `color`: Color of the line.

**Usage**:
```python
def update_line_chart(data):
    ani = pv.live_line_chart(data, title="Live Line Chart", xlabel="X Axis", ylabel="Y Axis", color='red')
    return ani

data = [1, 2, 3, 4, 5]
for i in range(10):
    data.append(data[-1] + 1)
    ani = update_line_chart(data)
    time.sleep(1)
```

## live_bar_chart

Creates a live updating bar chart.

**Parameters**:
- `data`: Dictionary with initial categories and values for the bar chart.
- `title`: Title of the chart.
- `xlabel`: Label for the x-axis.
- `ylabel`: Label for the y-axis.
- `color`: Color of the bars.

**Usage**:
```python
def update_bar_chart(data):
    ani = pv.live_bar_chart(data, title="Live Bar Chart", xlabel="Category", ylabel="Value", color='blue')
    return ani

data_bar = {'A': 10, 'B': 20, 'C': 30}
for i in range(10):
    data_bar['A'] += 1
    data_bar['B'] += 2
    data_bar['C'] += 3
    ani = update_bar_chart(data_bar)
    time.sleep(1)
```

## basic_analysis

Performs basic statistical analysis on the data.

**Parameters**:
- `data`: List of values to analyze.

**Usage**:
```python
data = [1, 2, 3, 4, 5]
analysis = pv.basic_analysis(data)
print("Basic Analysis:", analysis)
```

## advanced_analysis

Performs advanced statistical analysis on the data.

**Parameters**:
- `data`: List of values to analyze.

**Usage**:
```python
data = [1, 2, 3, 4, 5]
advanced_analysis = pv.advanced_analysis(data)
print("Advanced Analysis:", advanced_analysis)
```

## generate_report

Generates a report with the given data.

**Parameters**:
- `report_data`: Dictionary containing the report data.
- `format`: Format of the report. Default is 'pdf'.
- `output_path`: Output path for the generated report.

**Usage**:
```python
report_data = {
    'title': 'Data Analysis Report',
    'author': 'Huseyin Kaya',
    'date': '2024-06-22',
    'content': [
        {'type': 'line_chart', 'data': [1, 2, 3, 4, 5], 'title': 'Line Chart'},
        {'type': 'bar_chart', 'data': {'A': 10, 'B': 20, 'C': 30}, 'title': 'Bar Chart'},
        {'type': 'table', 'data': {'Column 1': [1, 2, 3], 'Column 2': [4, 5, 6]}, 'title': 'Sample Table'}
    ]
}

pv.generate_report(report_data, format='pdf', output_path='report.pdf')
```
